From 5063e4adac1318596bc70ccaf5d02cb35f53ddb5 Mon Sep 17 00:00:00 2001
From: Ivan Kardykov <kardykov@tabit.pro>
Date: Thu, 27 Jan 2022 18:02:52 +0300
Subject: [PATCH 51/56] xengt: get domctl interface version

Based on XCP-NG kernel patchset

https://github.com/xcp-ng-rpms/kernel
---
 drivers/gpu/drm/i915/gvt/xengt.c | 62 ++++++++++++++++++++++++++++++--
 drivers/gpu/drm/i915/gvt/xengt.h |  2 ++
 2 files changed, 61 insertions(+), 3 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/xengt.c b/drivers/gpu/drm/i915/gvt/xengt.c
index 0732730ff932..9eca60a225b9 100644
--- a/drivers/gpu/drm/i915/gvt/xengt.c
+++ b/drivers/gpu/drm/i915/gvt/xengt.c
@@ -507,6 +507,62 @@ static int xen_get_max_gpfn(domid_t vm_id)
 	return max_gpfn;
 }
 
+/*
+ * We cannot just use the value of XEN_DOMCTL_INTERFACE_VERSION provided
+ * by domctl.h as the version number is updated in the kernel source, and
+ * so if either the kernel or xen is updated independently of the other
+ * the version number will become out of sync (if the kernel is upgraded
+ * the value in XEN_DOMCTL_INTERFACE_VERSION will be compatible with the
+ * next version of xen rather than the one which we're running).
+ *
+ * Therefore, we use a domctl with no side effects to search for the right
+ * domctl version starting from XEN_DOMCTL_SEARCH_RANGE versions ahead of
+ * XEN_DOMCTL_INTERFACE_VERSION and working backwards.
+ */
+static u32 get_domctl_interface_version(void)
+{
+	/* Add XEN_DOMCTL_SEARCH_RANGE to XEN_DOMCTL_INTERFACE_VERSION since
+	 * xen may be updated separately, and so we must search both forwards
+	 * and backwards.
+	 */
+	static u32 version = XEN_DOMCTL_INTERFACE_VERSION + XEN_DOMCTL_SEARCH_RANGE;
+	static bool found = false;
+
+	while (!found) {
+		struct xen_domctl domctl;
+		int rc;
+
+		domctl.domain = DOMID_SELF;
+		domctl.cmd = XEN_DOMCTL_getdomaininfo;
+		domctl.interface_version = version;
+
+		gvt_dbg_core("trying HYPERVISOR_domctl version %08x\n",
+		       version);
+
+		rc = HYPERVISOR_domctl(&domctl);
+
+		/*
+		 * If we get EACCES back this means that the version is
+		 * wrong, so try an older version and see if that works.
+		 */
+		if (rc == -EACCES && version > XEN_DOMCTL_INTERFACE_VERSION - XEN_DOMCTL_SEARCH_RANGE) {
+			--version;
+			continue;
+		}
+
+		/*
+		 * Either we've found the right version in the range
+		 * XEN_DOMCTL_INTERACE_VERSION - XEN_DOMCTL_SEARCH_RANGE to
+		 * XEN_DOMCTL_INTERACE_VERSION + XEN_DOMCTL_SEARCH_RANGE, or
+		 * we give up, pass back the value we've got to and let the
+		 * failure path of the caller handle things.
+		 */
+		found = true;
+	}
+
+	return version;
+}
+
 static int xen_domain_iomem_perm(domid_t domain_id, uint64_t first_mfn,
 							uint64_t nr_mfns, uint8_t allow_access)
 {
@@ -515,7 +571,7 @@ static int xen_domain_iomem_perm(domid_t domain_id, uint64_t first_mfn,
 
 	arg.domain = domain_id;
 	arg.cmd = XEN_DOMCTL_iomem_permission;
-	arg.interface_version = XEN_DOMCTL_INTERFACE_VERSION;
+	arg.interface_version = get_domctl_interface_version(); 
 	arg.u.iomem_permission.first_mfn = first_mfn;
 	arg.u.iomem_permission.nr_mfns = nr_mfns;
 	arg.u.iomem_permission.allow_access = allow_access;
@@ -531,7 +587,7 @@ static int xen_get_nr_vcpu(domid_t vm_id)
 
 	arg.domain = vm_id;
 	arg.cmd = XEN_DOMCTL_getdomaininfo;
-	arg.interface_version = XEN_DOMCTL_INTERFACE_VERSION;
+	arg.interface_version = get_domctl_interface_version(); 
 
 	rc = HYPERVISOR_domctl(&arg);
 	if (rc < 0) {
@@ -560,7 +616,7 @@ static int xen_hvm_memory_mapping(domid_t vm_id, uint64_t first_gfn,
 
 	arg.domain = vm_id;
 	arg.cmd = XEN_DOMCTL_memory_mapping;
-	arg.interface_version = XEN_DOMCTL_INTERFACE_VERSION;
+	arg.interface_version = get_domctl_interface_version(); 
 	arg.u.memory_mapping.add_mapping = add_mapping;
 
 retry:
diff --git a/drivers/gpu/drm/i915/gvt/xengt.h b/drivers/gpu/drm/i915/gvt/xengt.h
index fd9be531c76a..a623bcb99f22 100644
--- a/drivers/gpu/drm/i915/gvt/xengt.h
+++ b/drivers/gpu/drm/i915/gvt/xengt.h
@@ -13,6 +13,8 @@ extern const struct intel_gvt_ops *intel_gvt_ops;
 #define VMEM_BUCK_SIZE		(1ULL << VMEM_BUCK_SHIFT)
 #define VMEM_BUCK_MASK		(~(VMEM_BUCK_SIZE - 1))
 
+#define XEN_DOMCTL_SEARCH_RANGE 10
+
 /*
  * xengt_hvm_dev is a wrapper of a vGPU instance which is reprensented by the
  * intel_vgpu structure. Under xen hypervisor, the xengt_instance stands for a
-- 
2.34.1

